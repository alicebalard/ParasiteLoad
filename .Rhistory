fit_flotation_ferrisi$H3
fit_flotation_ferrisi$H3$fit
fit_flotation_ferrisi$H3$fit$groupA
logLik(fit_flotation_ferrisi$H3$fit$groupA)
logLik(fit_flotation_ferrisi$H3$fit$groupA) +
logLik(fit_flotation_ferrisi$H3$fit$groupB)
## Fit model Weibull
fit_qpcr_ferrisi <- analyse(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
fit_qpcr_ferrisi
analyse2 <- function(data, response, model, group, myparamBounds = "default"){
if (myparamBounds == "default"){
paramBounds <- getParamBounds(model, data, response)
} else {
paramBounds <- myparamBounds
}
print(paste0("Analysing data for response: ", response))
FitForResponse <- runAll(data, response, model, group, paramBounds = paramBounds)
return(FitForResponse)
}
source('~/Schreibtisch/git_projects/parasiteLoad/R/analyse2.R')
analyse2(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
TEST <- analyse2(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
View(TEST)
TEST$FitGroupA$fitAdvancedAlpha
TEST$FitGroupA$fitAdvancedAlpha
logLik(TEST$FitGroupA$fitAdvancedAlpha)
logLik(TEST$FitGroupB$fitAdvancedAlpha(
logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha)
logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha)
logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha)
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha)
Gtest
logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
pvalue
dDF <- 1
pvalue <- 1 - pchisq(2*dLL, df=dDF)
pvalue
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 1
pvalue <- 1 - pchisq(2*dLL, df=dDF)
pvalue
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
pvalue
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
pvalue
TEST$FitGroupA$fitAdvancedAlpha
TEST$fitAdvancedAlpha
TEST$FitGroupA
TEST$FitGroupA$
TEST$FitGroupA$fitAdvancedAlpha
TEST$FitGroupA$fitAdvancedAlpha
TEST <- analyse(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
TEST$H3
TEST$H3$gTest
TEST$H3$gTest$groupA
TEST$H3$gTest$groupA[["pvalue"]]
TEST$H3$gTest$groupA
TEST$H3$gTest$groupA
TEST$H3$gTest$groupA[["pvalue"]]
a <- TEST$H3$gTest$groupA
a
a@`Testing H3 groupA no alpha vs alpha`[["pvalue"]]
a$`Testing H3 groupA no alpha vs alpha`[["pvalue"]]
TEST$H3$gTest$groupA$`Testing H3 groupA no alpha vs alpha`[["pvalue"]]
TEST$H3$gTest$groupB$`Testing H3 groupB no alpha vs alpha`[["pvalue"]]
manual Gtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
manualGtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
manualGtest(TEST)
TEST <- analyse2(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
manualGtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
manualGtest(TEST)
fullAlphaGtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
TEST <- analyse2(qpcr_ferrisi,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
fullAlphaGtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
fullAlphaGtest(TEST)
qpcr_ferrisi$delta_ct_cewe_MminusE
qpcr_ferrisi$delta_ct_cewe_MminusEPOS
hist(qpcr_ferrisi$delta_ct_cewe_MminusEPOS, breaks = 100)
weibull = fitdistrplus::fitdist(qpcrPOS, "weibull")
weibull
qpcrPOS <- qpcr_ferrisi[qpcr_ferrisi$delta_ct_cewe_MminusEPOS > 0,
"delta_ct_cewe_MminusEPOS"]
weibull = fitdistrplus::fitdist(qpcrPOS, "weibull")
weibull
rweibull(n = 38, shape = weibull$estimate[["shape"]], scale = weibull$estimate[["scale"]])
randomdf <- data.frame(delta_ct_cewe_MminusEPOS = rweibull(n = 38,
shape = weibull$estimate[["shape"]],
scale = weibull$estimate[["scale"]]),
HI = qpcr_ferrisi$HI,
Sex = qpcr_ferrisi$Sex)
TEST <- analyse2(randomdf,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
TEST
TEST$FitAll
TEST$FitAll$fitAdvancedAlpha[["alpha"]]
TEST$FitAll$fitAdvancedAlpha
TEST$FitAll$fitAdvancedAlpha
coef(TEST$FitAll$fitAdvancedAlpha)
coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]]
coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]] < 0
randomdf <- data.frame(delta_ct_cewe_MminusEPOS = rweibull(n = 38,
shape = weibull$estimate[["shape"]],
scale = weibull$estimate[["scale"]]),
HI = qpcr_ferrisi$HI,
Sex = qpcr_ferrisi$Sex)
TEST <- analyse2(randomdf,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]] < 0
randomdf <- data.frame(delta_ct_cewe_MminusEPOS = rweibull(n = 38,
shape = weibull$estimate[["shape"]],
scale = weibull$estimate[["scale"]]),
HI = qpcr_ferrisi$HI,
Sex = qpcr_ferrisi$Sex)
TEST <- analyse2(randomdf,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]] < 0
alphaneg <- 0
alphapos <- 0
for (i in 1:2){
randomdf <- data.frame(delta_ct_cewe_MminusEPOS = rweibull(n = 38,
shape = weibull$estimate[["shape"]],
scale = weibull$estimate[["scale"]]),
HI = qpcr_ferrisi$HI,
Sex = qpcr_ferrisi$Sex)
TEST <- analyse2(randomdf,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
if (coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]] < 0){
alphaneg <- alphaneg + 1
} else {
alphapos <- alphapos +1
}
}
alphapos
alphaneg
alphaneg <- 0
alphapos <- 0
for (i in 1:50){
randomdf <- data.frame(delta_ct_cewe_MminusEPOS = rweibull(n = 38,
shape = weibull$estimate[["shape"]],
scale = weibull$estimate[["scale"]]),
HI = qpcr_ferrisi$HI,
Sex = qpcr_ferrisi$Sex)
TEST <- analyse2(randomdf,
response = "delta_ct_cewe_MminusEPOS",
model = "weibull", group = "Sex")
if (coef(TEST$FitAll$fitAdvancedAlpha)[["alpha"]] < 0){
alphaneg <- alphaneg + 1
} else {
alphapos <- alphapos +1
}
}
list(alphapos = alphapos, alphaneg = alphaneg)
fullAlphaGtest <- function(TEST){
dLL <- logLik(TEST$FitGroupA$fitAdvancedAlpha) +
logLik(TEST$FitGroupB$fitAdvancedAlpha) - (
logLik(TEST$FitGroupA$fitAdvancedNoAlpha) +
logLik(TEST$FitGroupB$fitAdvancedNoAlpha))
dDF <- 2
pvalue <- 1 - pchisq(2*dLL, df=dDF)
return(pvalue)
}
fullAlphaGtest(TEST)
library(parasiteLoad)
library(bbmle)
require(optimx) # for bbmle it needs to be required(?)
library(ggplot2)
library(MASS)
library(fitdistrplus) # evaluate distribution
library(epiR) # Sterne's exact method
library(simpleboot) # BS
library(boot) # BS
# add 1 for worms/oocysts count!!
WATWMdata$`Aspiculuris.Syphacia+1` <- WATWMdata$Aspiculuris.Syphacia + 1
BALdata$`Aspiculuris.Syphacia+1` <- BALdata$Aspiculuris_Syphacia + 1
BALdata$`OPG+1` <- BALdata$OPG + 1
# and select variables for each analysis
pinworms_data <- BALdata[!is.na(BALdata$`Aspiculuris.Syphacia+1`) &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex),]
WATWMdata <- WATWMdata[!is.na(WATWMdata$`Aspiculuris.Syphacia+1`) &
!is.na(WATWMdata$HI) &
!is.na(WATWMdata$Sex), ]
# all worms together for comparison
d1 <- WATWMdata[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d2 <- pinworms_data[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d1$batch <- "WATWM"
d2$batch <- "JENNY"
allWorms <- rbind(d1,d2)
allWorms$batch <- as.factor(allWorms$batch)
xPOS <- BALdata$Aspiculuris_Syphacia[!is.na(BALdata$Aspiculuris_Syphacia) &
BALdata$Aspiculuris_Syphacia >= 1]
averageload <- round(mean(xPOS, na.rm = T),1)
averageload
Ni <- length(xPOS)
Ni
Meanload <-  mean(xPOS, na.rm = T)
max <- max(xPOS, na.rm = T)
Meanload
max
set.seed(8345) # to make it replicable
b1 <- one.boot(xPOS, mean, R=10000)
b1$t0
boot.ci(b1, type=c("bca"))
## MLE of parameter k negbin
hist(xPOS, prob=T, breaks = max(xPOS))
# fit the negative binomial distribution
fit <- fitdist(xPOS, "nbinom")
# get the fitted densities. mu and size from fit.
fitD <- dnbinom(0:max(xPOS), size=fit$estimate[1], mu=fit$estimate[2])
# add fitted line (blue) to histogram
lines(fitD, lwd="3", col="blue")
# Goodness of fit with the chi squared test
# get the frequency table
t <- table(xPOS)
# convert to dataframe
df <- as.data.frame(t)
df$xPOS <- as.numeric(as.character(df$xPOS))
df$expp <- pnbinom(q = df$xPOS, size=fit$estimate[1], mu = fit$estimate[2])
df$obsp <- cumsum(df$Freq / sum(df$Freq))
# perform the chi-squared test
chisq.test(x = df$expp, y = df$obsp)
size=fit$estimate[1]
size
# The negative binomial distribution seems to describe parasite load well for all parasites
View(BALdata)
library(parasiteLoad)
library(bbmle)
require(optimx) # for bbmle it needs to be required(?)
library(MASS)
library(epiR) # Sterne's exact method
library(epiR) # Sterne's exact method
library(simpleboot) # BS
library(boot) # BS
# add 1 for worms/oocysts count!!
WATWMdata$`Aspiculuris.Syphacia+1` <- WATWMdata$Aspiculuris.Syphacia + 1
BALdata$`Aspiculuris.Syphacia+1` <- BALdata$Aspiculuris_Syphacia + 1
BALdata$`OPG+1` <- BALdata$OPG + 1
# and select variables for each analysis
pinworms_data <- BALdata[!is.na(BALdata$`Aspiculuris.Syphacia+1`) &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex),]
WATWMdata <- WATWMdata[!is.na(WATWMdata$`Aspiculuris.Syphacia+1`) &
!is.na(WATWMdata$HI) &
!is.na(WATWMdata$Sex), ]
# all worms together for comparison
d1 <- WATWMdata[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d2 <- pinworms_data[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d1$batch <- "WATWM"
d2$batch <- "JENNY"
allWorms <- rbind(d1,d2)
allWorms$batch <- as.factor(allWorms$batch)
xPOS <- BALdata$Aspiculuris_Syphacia[!is.na(BALdata$Aspiculuris_Syphacia) &
BALdata$Aspiculuris_Syphacia >= 1]
averageload <- round(mean(xPOS, na.rm = T),1)
averageload
Ni <- length(xPOS)
Ni
Meanload <-  mean(xPOS, na.rm = T)
max <- max(xPOS, na.rm = T)
Meanload
max
BALdata$Species
grep("ZZ", BALdata$Mouse_ID)
BALdata$Mouse_ID
library(ggplot2)
library(ggmap)
library(data.table)
library(plyr)
library("VennDiagram")
library(grid)
library(gridExtra)
library(knitr)
source("functions/HMHZ_Functions.R")
source("functions/makeMiceTable.R")
## Load data from oocysts counting
flotDF <- read.csv("../data/Eimeria_detection/FINALOocysts2015to2017.csv")
setwd(dir = "../Mouse_Eimeria_Databasing/")
source("functions/HMHZ_Functions.R")
setwd("R/")
source("functions/HMHZ_Functions.R")
source("functions/makeMiceTable.R")
## Load data from oocysts counting
flotDF <- read.csv("../data/Eimeria_detection/FINALOocysts2015to2017.csv")
LorenzoDF <- read.csv("../data/Eimeria_detection/Eimeria_oocysts_2015&2017_Lorenzo.csv")
#################### Load full data ####################
# General data
miceTable <- read.csv("../data/MiceTable_fullEimeriaInfos_2014to2017.csv")
# Remove other rodents
miceTable <- miceTable[!miceTable$Species %in% "Pet mus musculus",]
miceTable <- miceTable[-grep("ZZ", miceTable$Mouse_ID),]
miceTable <- miceTable[!miceTable$Mouse_ID %in% paste0("A_000", 1:3),]
## Remove wildpark Schorfheide (not needed, test)
wsh <- c(paste0("AA_000", 1:9), paste0("AA_00", 10:46))
miceTable <- miceTable[!miceTable$Mouse_ID %in% wsh ,]
# Give a PCR status
# by default, I enter PCRstatus as negative, then overwrite
miceTable$PCRstatus = "negative"
# PCR positive = one of the 3 other markers than AP5 sequenced
# (Ap5 was used for detection only, the other markers for confirmation)
miceTable$PCRstatus[miceTable$n18S_Seq == "positive" |
miceTable$COI_Seq == "positive" |
miceTable$ORF470_Seq == "positive"] <- "positive"
# PCRstatus is NA if everything is NA
miceTable$PCRstatus[is.na(miceTable$n18S_Seq) &
is.na(miceTable$COI_Seq) &
is.na(miceTable$ORF470_Seq)] <- NA
#################### Load full data ####################
# General data
miceTable <- read.csv("../data/MiceTable_fullEimeriaInfos_2014to2017.csv")
# keep only North Germany
miceTable <- miceTable[!is.na(miceTable$Latitude) &
miceTable$Latitude > 51 &
miceTable$Longitude < 17, ]
# Load your data in this environment
read.csv(file = "data/WATWMdata.RData")
# Load your data in this environment
read.csv(file = "../Mouse_Eimeria_Databasing/data/Field_data/EmanuelData_26061018.csv")
# Load your data in this environment
read.csv(file = "../Mouse_Eimeria_Databasing/data/Field_data/EmanuelData_26061018.csv")
# Load your data in this environment
mydata <- read.csv(file = "../Mouse_Eimeria_Databasing/data/Field_data/EmanuelData_26061018.csv")
View(mydata)
View(mydata)
str(mydata)
mydata$Sex
mydata[["Sex"]]
table(mydata$Sex)
mydata$Sex == "F"
mydata[mydata$Sex == "F", ]
mydataFemale <- mydata[mydata$Sex == "F", ]
View(mydataFemale)
subset(x = mydata, select = mydata$Sex == "F")
subset(x = mydata, select = Sex == "F")
?subset
subset(x = mydata, Sex == "F")
# or
mydataFemale <-subset(x = mydata, Sex == "F")
View(mydata)
mydata[mydata$Sex == "F" & mydata$X_Longit > 14, ]
mydatasexFhighlat <- mydata[mydata$Sex == "F" & mydata$X_Longit > 14, ]
View(mydatasexFhighlat)
mean(mydatasexFhighlat$X_Longit)
mean(mydatasexFhighlat$X_Longit, na.rm = TRUE)
horribleData <- read.csv("../../Students/RAW_Data_copy_R.csv")
horribleData <- read.csv("../../Students/RAW_Data_copy_R.csv")
View(horribleData)
# replace spaces with underscore in 1 column
example <- c("lalala", " lalala")
table(example)
gsub(pattern = " ", replacement = "", x = example)
gsub(pattern = "_", replacement = "YOUPI", x = horribleData$X)
horribleData$X <- gsub(pattern = "_", replacement = "YOUPI", x = horribleData$X)
View(horribleData)
horribleData <- read.csv("../../Students/RAW_Data_copy_R.csv")
View(horribleData)
# replace spaces with underscore in 1 column
horribleData$X <- gsub(pattern = "_", replacement = "YOUPI", x = horribleData$X)
View(horribleData)
# some begin of reshaping
library(reshape2)
View(horribleData)
melt(horribleData, id.vars = X)
melt(horribleData, id.vars = "X")
lesshorribledata <- melt(horribleData, id.vars = "X")
View(lesshorribledata)
lesshorribledata <- melt(horribleData, id.vars = "X", variable.name = "whatever")
View(mydata)
View(lesshorribledata)
View(horribleData)
grep("BMP", horribleData$X)
horribleData$X[grep("BMP", horribleData$X)]
fit_qpcr_weibull <- analyse(qpcr,
response = "delta_ct_max_MminusEPOS",
model = "weibull", group = "Sex")
roxygen2::roxygenise()
library(parasiteLoad)
library(parasiteLoad)
library(bbmle)
require(optimx) # for bbmle it needs to be required(?)
library(ggplot2)
library(MASS)
library(fitdistrplus) # evaluate distribution
library(epiR) # Sterne's exact method
library(simpleboot) # BS
library(boot) # BS
# select variables for each analysis
BALdata <- read.csv("../data/MiceTableMusAliceArticle.csv")
flotation <- BALdata[!is.na(BALdata$OPG) &
BALdata$OPG >= 1 &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex), ]
flotation$OPG <- round(flotation$OPG)
qpcr <- BALdata[(BALdata$delta_ct_cewe_MminusE > -5 &
!is.na(BALdata$delta_ct_cewe_MminusE)) |
(BALdata$delta_ct_ilwe_MminusE > -5 &
!is.na(BALdata$delta_ct_ilwe_MminusE)),]
df <- qpcr[, c("delta_ct_cewe_MminusE", "delta_ct_ilwe_MminusE")]
qpcr$delta_ct_max_MminusEPOS <- apply(df, 1, function(x){ max(x, na.rm = T)}) + 5
ggplot(qpcr,
aes(x = HI, y = delta_ct_max_MminusEPOS)) +
geom_point() +
theme_classic()
fit_qpcr_weibull <- analyse(qpcr,
response = "delta_ct_max_MminusEPOS",
model = "weibull", group = "Sex")
fit_qpcr_weibull
bananaPlots_alpha(mod = fit_qpcr_weibull$H1,
data = qpcr,
response = "delta_ct_max_MminusEPOS",
group = "Sex")
fit_flotation_ferrisi <- analyse(flotation_ferrisi,
response = "OPG",
model = "negbin", group = "Sex")
fit_flotation_ferrisi <- analyse(flotation,
response = "OPG",
model = "negbin", group = "Sex")
fit_flotation <- analyse(flotation,
response = "OPG",
model = "negbin", group = "Sex")
fit_flotation
fit_flotation <- analyse(flotation,
response = "OPG",
model = "negbin", group = "Sex")
fit_flotation <- analyse(flotation,
response = "OPG",
model = "negbin", group = "Sex")
fit_flotation
bananaPlots_alpha(model = "negbin",
mod = fit_flotation_ferrisi$H1, data = flotation_ferrisi,
response = "OPG", group = "Sex", islog10 = T)
bananaPlots_alpha(mod = fit_flotation$H1, data = flotation,
response = "OPG", group = "Sex", islog10 = T)
bananaPlots_alpha(mod = fit_flotation$H1, data = flotation,
response = "OPG", group = "Sex", islog10 = T)
