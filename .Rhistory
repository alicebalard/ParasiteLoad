)
1 - plogspline(ks.test(observedValues
, "pweibull"
, shape= fit.weibull$estimate["shape"]
, scale = fit.weibull$estimate["scale"])$statistic
, fit
)
boot.pdf <- sapply(1:1000, function(i) {
xi <- sample(observedValues, size=length(observedValues), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
dweibull(xs, shape=MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
# This confirms our graphical conclusion that the sample is compatible with a Weibull distribution.
#
# As explained here, we can use bootstrapping to add pointwise confidence intervals to the estimated Weibull PDF or CDF:
xs <- seq(10, 65, len=500)
true.weibull <- rweibull(1e6, shape= fit.weibull$estimate["shape"]
, scale = fit.weibull$estimate["scale"])
boot.pdf <- sapply(1:1000, function(i) {
xi <- sample(observedValues, size=length(observedValues), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
dweibull(xs, shape=MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
boot.cdf <- sapply(1:1000, function(i) {
xi <- sample(x, size=length(x), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
pweibull(xs, shape= MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
par(bg="white", las=1, cex=1.2)
plot(xs, boot.pdf[, 1], type="l", col=rgb(.6, .6, .6, .1), ylim=range(boot.pdf),
xlab="x", ylab="Probability density")
for(i in 2:ncol(boot.pdf)) lines(xs, boot.pdf[, i], col=rgb(.6, .6, .6, .1))
boot.pdf <- sapply(1:1000, function(i) {
xi <- sample(observedValues, size=length(observedValues), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
dweibull(xs, shape=MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
boot.cdf <- sapply(1:1000, function(i) {
xi <- sample(observedValues, size=length(observedValues), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
pweibull(xs, shape= MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
par(bg="white", las=1, cex=1.2)
plot(xs, boot.pdf[, 1], type="l", col=rgb(.6, .6, .6, .1), ylim=range(boot.pdf),
xlab="observedValues", ylab="Probability density")
for(i in 2:ncol(boot.pdf)) lines(xs, boot.pdf[, i], col=rgb(.6, .6, .6, .1))
quants <- apply(boot.pdf, 1, quantile, c(0.025, 0.5, 0.975))
min.point <- apply(boot.pdf, 1, min, na.rm=TRUE)
max.point <- apply(boot.pdf, 1, max, na.rm=TRUE)
lines(xs, quants[1, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[3, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[2, ], col="darkred", lwd=2)
quants <- apply(boot.cdf, 1, quantile, c(0.025, 0.5, 0.975))
min.point <- apply(boot.cdf, 1, min, na.rm=TRUE)
max.point <- apply(boot.cdf, 1, max, na.rm=TRUE)
lines(xs, quants[1, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[3, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[2, ], col="darkred", lwd=2)
par(bg="white", las=1, cex=1.2)
plot(xs, boot.cdf[, 1], type="l", col=rgb(.6, .6, .6, .1), ylim=range(boot.cdf),
xlab="x", ylab="F(x)")
for(i in 2:ncol(boot.cdf)) lines(xs, boot.cdf[, i], col=rgb(.6, .6, .6, .1))
quants <- apply(boot.cdf, 1, quantile, c(0.025, 0.5, 0.975))
min.point <- apply(boot.cdf, 1, min, na.rm=TRUE)
max.point <- apply(boot.cdf, 1, max, na.rm=TRUE)
lines(xs, quants[1, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[3, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[2, ], col="darkred", lwd=2)
plot_qpcr_student
observedValues <- qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, "delta_ct_MminusEAllPos"]
library(fitdistrplus)
library(logspline)
descdist(observedValues, discrete = FALSE)
fits_test_qpcr <- list(
normal = fitdist(observedValues, "norm"),
weibull = fitdist(observedValues, "weibull"),
student = fitdist(observedValues, "t", start = list(df = 3))
)
plot(fits_test_qpcr$normal)
plot(fits_test_qpcr$weibull)
plot(fits_test_qpcr$student)
plot(fits_test_qpcr$normal)
plot(fits_test_qpcr$weibull)
plot(fits_test_qpcr$student)
## Fit a weibull distribution model!!!!
data = qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ]
response = "delta_ct_MminusEAllPos",
model = "student", group = "Sex"
data = qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ]
response = "delta_ct_MminusEAllPos"
model = "student"
group = "Sex"
data$response <- data[[response]] # little trick
x <- c(0, rlnorm(50))
all.equal(dweibull(x, shape = 1), dexp(x))
all.equal(pweibull(x, shape = 1, scale = pi), pexp(x, rate = 1/pi))
## Cumulative hazard H():
all.equal(pweibull(x, 2.5, pi, lower.tail = FALSE, log.p = TRUE),
-(x/pi)^2.5, tolerance = 1e-15)
all.equal(qweibull(x/11, shape = 1, scale = pi), qexp(x/11, rate = 1/pi))
dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf)
## Fit a weibull distribution model!!!!
data = qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ]
response = "delta_ct_MminusEAllPos"
model = "student"
group = "Sex"
data$response <- data[[response]] # little trick
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
fit$estimate
library(parasiteLoad)
library(bbmle)
require(optimx) # for bbmle it needs to be required(?)
library(ggplot2)
library(MASS)
# add 1 for worms/oocysts count!!
WATWMdata$`Aspiculuris.Syphacia+1` <- WATWMdata$Aspiculuris.Syphacia + 1
BALdata$`Aspiculuris.Syphacia+1` <- BALdata$Aspiculuris_Syphacia + 1
BALdata$`OPG+1` <- BALdata$OPG + 1
# and select variables for each analysis
qpcr_data <- BALdata[!is.na(BALdata$HI) &
!is.na(BALdata$Sex) &
!is.na(BALdata$delta_ct_MminusEAllPos), ]
flotation_data <- BALdata[!is.na(BALdata$`OPG+1`) &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex), ]
pinworms_data <- BALdata[!is.na(BALdata$`Aspiculuris.Syphacia+1`) &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex),]
body_data <- BALdata[!is.na(BALdata$Body_weight) &
!is.na(BALdata$Body_length) &
!is.na(BALdata$HI) &
!is.na(BALdata$Sex) &
!is.na(BALdata$qPCRstatus) ,]
WATWMdata <- WATWMdata[!is.na(WATWMdata$`Aspiculuris.Syphacia+1`) &
!is.na(WATWMdata$HI) &
!is.na(WATWMdata$Sex), ]
# all worms together for comparison
d1 <- WATWMdata[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d2 <- pinworms_data[c("Sex", "Aspiculuris.Syphacia+1", "HI")]
d1$batch <- "WATWM"
d2$batch <- "JENNY"
allWorms <- rbind(d1,d2)
allWorms$batch <- as.factor(allWorms$batch)
fit_qpcr_student <- analyse(qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ],
response = "delta_ct_MminusEAllPos",
model = "student", group = "Sex")
fit_qpcr_student
plot_qpcr_student <- bananaPlots(mod = fit_qpcr_student$H0,
data = qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ],
response = "delta_ct_MminusEAllPos", group = "Sex")
plot_qpcr_student
observedValues <- qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, "delta_ct_MminusEAllPos"]
library(fitdistrplus)
library(logspline)
descdist(observedValues, discrete = FALSE)
fits_test_qpcr <- list(
normal = fitdist(observedValues, "norm"),
weibull = fitdist(observedValues, "weibull"),
student = fitdist(observedValues, "t", start = list(df = 3))
)
plot(fits_test_qpcr$normal)
plot(fits_test_qpcr$weibull)
plot(fits_test_qpcr$student)
#Get the logliks for each model...
sapply(fits_test_qpcr, function(i) i$loglik)
sapply(fits_test_qpcr, function(i) i$aic)
fits_test_qpcr$weibull
data$response <- data[[response]] # little trick
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 0, myshapeLB = 0, myshapeUB = 10)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
getParamBounds <- function(model, data, response){
if (model == "binomial"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5)
} else if (model == "student"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
mydfStart = 1, mydfLB = 1, mydfUB = 10)
} else if (model == "negbin"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = 0,
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = 0,
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
A1start = 10, A1LB = 1e-9, A1UB = 1000,
A2start = 10, A2LB = 1e-9, A2UB = 1000,
Zstart = 0, ZLB = -20, ZUB = 20)
} else if (model == "weibull"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 0, myshapeLB = 0, myshapeUB = 10)
}
return(paramBounds)
}
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
analyse(qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ],
response = "delta_ct_MminusEAllPos",
model = "student", group = "Sex")
fit_qpcr_student
fit
printConvergence(fit)
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
printConvergence(fit)
cr_data$delta_ct_MminusEAllPos > 0, ]
response = "delta_ct_MminusEAllPos"
model = "student"
group = "Sex"
## Fit a weibull distribution model!!!!
data = qpcr_data[qpcr_data$delta_ct_MminusEAllPos > 0, ]
response = "delta_ct_MminusEAllPos"
model = "student"
group = "Sex"
data$response <- data[[response]] # little trick
getParamBounds <- function(model, data, response){
if (model == "binomial"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5)
} else if (model == "student"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
mydfStart = 1, mydfLB = 1, mydfUB = 10)
} else if (model == "negbin"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = 0,
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = 0,
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
A1start = 10, A1LB = 1e-9, A1UB = 1000,
A2start = 10, A2LB = 1e-9, A2UB = 1000,
Zstart = 0, ZLB = -20, ZUB = 20)
} else if (model == "weibull"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 0, myshapeLB = 0, myshapeUB = 10)
}
return(paramBounds)
}
# 1. student
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
config <- list(optimizer = "optimx",
method = c("L-BFGS-B", "bobyqa"),
control = list(follow.on = TRUE))
# 1. student
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
fit
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
# 2. weibull
paramBounds <-  getParamBounds(model = "weibull", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
myshape = paramBounds[["myshapeStart"]])
fit <- bbmle::mle2(
response ~ dweibull(shape = myshape,
scale = MeanLoad(L1, L1, alpha, HI)/myshape),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
myshape = paramBounds[["myshapeLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
myshape = paramBounds[["myshapeUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
getParamBounds <- function(model, data, response){
if (model == "binomial"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5)
} else if (model == "student"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
mydfStart = 1, mydfLB = 1, mydfUB = 10)
} else if (model == "negbin"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = 0,
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = 0,
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
A1start = 10, A1LB = 1e-9, A1UB = 1000,
A2start = 10, A2LB = 1e-9, A2UB = 1000,
Zstart = 0, ZLB = -20, ZUB = 20)
} else if (model == "weibull"){
paramBounds <- c(L1start = mean(na.omit(data[[response]])),
L1LB = min(na.omit(data[[response]])),
L1UB = max(na.omit(data[[response]])),
L2start = mean(na.omit(data[[response]])),
L2LB = min(na.omit(data[[response]])),
L2UB = max(na.omit(data[[response]])),
alphaStart = 0, alphaLB = -5, alphaUB = 5,
myshapeStart = 1, myshapeLB = 1, myshapeUB = 5)
}
return(paramBounds)
}
config <- list(optimizer = "optimx",
method = c("L-BFGS-B", "bobyqa"),
control = list(follow.on = TRUE))
# 1. student
paramBounds <-  getParamBounds(model = "student", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
mydf = paramBounds[["mydfStart"]])
fit <- bbmle::mle2(
response ~ dt(ncp = MeanLoad(L1, L1, alpha, HI),
df = mydf),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
mydf = paramBounds[["mydfLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
mydf = paramBounds[["mydfUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
fit
# 2. weibull
paramBounds <-  getParamBounds(model = "weibull", data = data, response = response)
start <-  list(L1 = paramBounds[["L1start"]],
alpha = paramBounds[["alphaStart"]],
myshape = paramBounds[["myshapeStart"]])
fit <- bbmle::mle2(
response ~ dweibull(shape = myshape,
scale = MeanLoad(L1, L1, alpha, HI)/myshape),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
alpha = paramBounds[["alphaLB"]],
myshape = paramBounds[["myshapeLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
alpha = paramBounds[["alphaUB"]],
myshape = paramBounds[["myshapeUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
fit
FitBasicNoAlphaWeibull <- function(data, response, hybridIndex, paramBounds, config){
print("Fitting model basic without alpha")
data$response <- data[[response]] # little trick
start <-  list(L1 = paramBounds[["L1start"]])
fit <- bbmle::mle2(
response ~ dweibull(shape = myshape,
scale = MeanLoad(L1, L1, 0, HI)/myshape),
data = data,
start = start,
lower = c(L1 = paramBounds[["L1LB"]],
myshape = paramBounds[["myshapeLB"]]),
upper = c(L1 = paramBounds[["L1UB"]],
myshape = paramBounds[["myshapeUB"]]),
optimizer = config$optimizer,
method = config$method,
control = config$control)
printConvergence(fit)
return(fit)
}
