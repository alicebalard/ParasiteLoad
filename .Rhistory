lower = c(L1 = getInf("L1"), L2 = getInf("L2"), alpha = getInf("alpha")),
upper = c(L1 = getSup("L1"), L2 = getSup("L2"), alpha = getSup("alpha")),
method = "L-BFGS-B",
hybridIndex = i)
bananaDF2 = rbind(bananaDF2, data.frame(HI = i, min = minLoad$value, max = maxLoad$value))
}
bananaDF$minAll <- bananaDF2$min
bananaDF$maxAll <- bananaDF2$max
# step 3 : run over HI values and optimise max and min for hybrid effect varying in it's 95% CI and other variable fixed at fit
bananaDF2 = data.frame(HI = numeric(), min = numeric(), max = numeric())
for(i in hybridIndex){
maxLoad <- optim(par = getSup("alpha") - getInf("alpha"),
fn = parasiteLoad::MeanLoad,
lower = getInf("alpha"),
upper = getSup("alpha"),
L1 = fittedCoef[["L1"]],
L2 = fittedCoef[["L2"]],
method = "L-BFGS-B",
control = list(fnscale=-1), # maximize
hybridIndex = i)
minLoad <- optim(par = getSup("alpha") - getInf("alpha"),
fn = parasiteLoad::MeanLoad,
lower = getInf("alpha"),
upper = getSup("alpha"),
L1 = fittedCoef[["L1"]],
L2 = fittedCoef[["L2"]],
method = "L-BFGS-B", # minimize
hybridIndex = i)
bananaDF2 = rbind(bananaDF2, data.frame(HI = i, min = minLoad$value, max = maxLoad$value))
}
bananaDF$minAlpha <- bananaDF2$min
bananaDF$maxAlpha <- bananaDF2$max
return(bananaDF)
}
if(is.list(mod) == FALSE){ # we do not have differences between groups
bananaDFtoplot <- getBananaDF(mod = mod, hybridIndex = hybridIndex)
bananaDFtoplot$group <- "all"
} else {
bananaList <- lapply(mod, FUN = getBananaDF, hybridIndex = hybridIndex)
bananaDFA <- bananaList$groupA
bananaDFB <- bananaList$groupB
bananaDFA$group <- levels(data$group)[1]
bananaDFB$group <- levels(data$group)[2]
bananaDFtoplot <- rbind(bananaDFA, bananaDFB)
}
## And now plot!
p <- ggplot2::ggplot() +
ggplot2::geom_ribbon(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", ymin = "minAll", ymax = "maxAll",
group = "group"),
fill = "grey", alpha = .4) +
ggplot2::geom_line(data = bananaDFtoplot, size = 2,
ggplot2::aes_string(x = "HI", y = "fit", col = "group")) +
ggplot2::geom_line(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", y = "minAlpha", col = "group"),
linetype="dashed", size = 2) +
ggplot2::geom_line(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", y = "maxAlpha", col = "group"),
linetype="dashed", size = 2) +
ggplot2::geom_point(data = data, ggplot2::aes_string(x = "HI", y = "response", fill = "group"),
pch = 21, size = 3, alpha = .7) +
ggplot2::scale_fill_manual(values = cols) +
ggplot2::theme_classic(base_size = 20) + {
if(islog10 == TRUE) ggplot2::scale_y_log10()
} +
ggplot2::ylab(label = response)
if(is.list(mod) == TRUE){
p <- p + ggplot2::scale_color_manual(values = cols)
} else {
p <- p + ggplot2::scale_color_manual(values = "black")
}
retunr(p)
}
bananaPlot <- function(mod, data, response, hybridIndex = seq(0,1, 0.05),
cols = wes_palette("IsleofDogs1")[c(1,3)], group, islog10 = F){
# for aes_string
data$response = data[[response]]
data$group = data[[group]]
# Create a dataframe for plotting
getBananaDF <- function(mod, hybridIndex){
## Fitted coefficients
fittedCoef <- bbmle::coef(mod)
# if no L2 calculated, set L1
if("L2" %in% names(fittedCoef) == FALSE){
fittedCoef <- c(fittedCoef, fittedCoef[names(fittedCoef) %in% "L1"])
names(fittedCoef)[length(names(fittedCoef))] <- "L2"
}
# Confidence interval for all coefficients based on quadratic approximation to the curvature at the maximum likelihood estimate
myConfInt <- bbmle::confint(mod, method="quad")
# if no L2 calculated, set L1
if("L2" %in% rownames(myConfInt) == FALSE){
myConfInt <- rbind(myConfInt[rownames(myConfInt) %in% "L1"], myConfInt)
rownames(myConfInt)[1] <- "L2"
}
## Get marginal confidence interval for a given parameter
getInf <- function(paramname){
myConfInt[rownames(myConfInt) == paramname][1]}
getSup <- function(paramname){
myConfInt[rownames(myConfInt) == paramname][2]}
# Function to optimise for parameters varying in their confidance interval
expectedResponse <- function(v, hybridIndex){
L1 = v[1]; L2 = v[2]; alpha = v[3]
heterozygoty <- 2 * hybridIndex * (1 - hybridIndex)
expectedResponse <- (L1 + (L2 - L1) * hybridIndex) * (1 - alpha * heterozygoty)
return(expectedResponse)
}
# create dataframe to fill up
bananaDF = data.frame(HI = hybridIndex)
# step 1 : calculate response expected by the model
bananaDF$fit <- expectedResponse(c(fittedCoef[["L1"]],
fittedCoef[["L2"]],
fittedCoef[["alpha"]]),
hybridIndex = hybridIndex)
# step 2 : run over HI values and optimise max and min for each variable varying in their 95% CI
bananaDF2 = data.frame(HI = numeric(), min = numeric(), max = numeric())
for(i in hybridIndex){
maxLoad <- optim(par = c(L1 = getSup("L1") - getInf("L1"),
L2 = getSup("L2") - getInf("L2"),
alpha = getSup("alpha") - getInf("alpha")),
fn = expectedResponse,
lower = c(L1 = getInf("L1"), L2 = getInf("L2"), alpha = getInf("alpha")),
upper = c(L1 = getSup("L1"), L2 = getSup("L2"), alpha = getSup("alpha")),
method = "L-BFGS-B",
control = list(fnscale=-1), # maximize
hybridIndex = i)
minLoad <- optim(par = c(L1 = getSup("L1") - getInf("L1"),
L2 = getSup("L2") - getInf("L2"),
alpha = getSup("alpha") - getInf("alpha")),
fn = expectedResponse,
lower = c(L1 = getInf("L1"), L2 = getInf("L2"), alpha = getInf("alpha")),
upper = c(L1 = getSup("L1"), L2 = getSup("L2"), alpha = getSup("alpha")),
method = "L-BFGS-B",
hybridIndex = i)
bananaDF2 = rbind(bananaDF2, data.frame(HI = i, min = minLoad$value, max = maxLoad$value))
}
bananaDF$minAll <- bananaDF2$min
bananaDF$maxAll <- bananaDF2$max
# step 3 : run over HI values and optimise max and min for hybrid effect varying in it's 95% CI and other variable fixed at fit
bananaDF2 = data.frame(HI = numeric(), min = numeric(), max = numeric())
for(i in hybridIndex){
maxLoad <- optim(par = getSup("alpha") - getInf("alpha"),
fn = parasiteLoad::MeanLoad,
lower = getInf("alpha"),
upper = getSup("alpha"),
L1 = fittedCoef[["L1"]],
L2 = fittedCoef[["L2"]],
method = "L-BFGS-B",
control = list(fnscale=-1), # maximize
hybridIndex = i)
minLoad <- optim(par = getSup("alpha") - getInf("alpha"),
fn = parasiteLoad::MeanLoad,
lower = getInf("alpha"),
upper = getSup("alpha"),
L1 = fittedCoef[["L1"]],
L2 = fittedCoef[["L2"]],
method = "L-BFGS-B", # minimize
hybridIndex = i)
bananaDF2 = rbind(bananaDF2, data.frame(HI = i, min = minLoad$value, max = maxLoad$value))
}
bananaDF$minAlpha <- bananaDF2$min
bananaDF$maxAlpha <- bananaDF2$max
return(bananaDF)
}
if(is.list(mod) == FALSE){ # we do not have differences between groups
bananaDFtoplot <- getBananaDF(mod = mod, hybridIndex = hybridIndex)
bananaDFtoplot$group <- "all"
} else {
bananaList <- lapply(mod, FUN = getBananaDF, hybridIndex = hybridIndex)
bananaDFA <- bananaList$groupA
bananaDFB <- bananaList$groupB
bananaDFA$group <- levels(data$group)[1]
bananaDFB$group <- levels(data$group)[2]
bananaDFtoplot <- rbind(bananaDFA, bananaDFB)
}
## And now plot!
p <- ggplot2::ggplot() +
ggplot2::geom_ribbon(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", ymin = "minAll", ymax = "maxAll",
group = "group"),
fill = "grey", alpha = .4) +
ggplot2::geom_line(data = bananaDFtoplot, size = 2,
ggplot2::aes_string(x = "HI", y = "fit", col = "group")) +
ggplot2::geom_line(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", y = "minAlpha", col = "group"),
linetype="dashed", size = 2) +
ggplot2::geom_line(data = bananaDFtoplot,
ggplot2::aes_string(x = "HI", y = "maxAlpha", col = "group"),
linetype="dashed", size = 2) +
ggplot2::geom_point(data = data, ggplot2::aes_string(x = "HI", y = "response", fill = "group"),
pch = 21, size = 3, alpha = .7) +
ggplot2::scale_fill_manual(values = cols) +
ggplot2::theme_classic(base_size = 20) + {
if(islog10 == TRUE) ggplot2::scale_y_log10()
} +
ggplot2::ylab(label = response)
if(is.list(mod) == TRUE){
p <- p + ggplot2::scale_color_manual(values = cols)
} else {
p <- p + ggplot2::scale_color_manual(values = "black")
}
return(p)
}
bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
source('~/Desktop/git/Parasite_Load/R/BananaPlot.R')
fit_WATWM_abundance
bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
plot_WATWM_abundance <- bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
plot_WATWM_abundance
plot_WATWM_abundance <- bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
plot_WATWM_abundance
roxygen2::roxygenise()
library(parasiteLoad)
list.of.packages <- c("parasiteLoad",
"bbmle",
"devtools",
"optimx", # for bbmle it needs to be required(?)
"ggplot2",
"VennDiagram",
"fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"simpleboot", # BS
# "boot", # BS
"ggmap",
"gridExtra",# several plots in one panel
"wesanderson") # nice colors
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
## Install_github case
if(!"legendMap" %in% installed.packages()[,"Package"]){
devtools::install_github("3wen/legendMap")
}
library(legendMap)
plotMap <- function(df, margin = 1, zoom = 8,
source = "stamen", maptype = "toner-lite"){
area <- get_map(location =
c(min(df$Longitude - margin),
min(df$Latitude - margin),
max(df$Longitude + margin),
max(df$Latitude +  margin)),
source = source, maptype= maptype,
zoom = zoom)
ggmap(area) +
geom_point(data = df, shape = 21, size = 2,
aes(Longitude, Latitude, fill = HI), alpha = .4) + # set up the points
scale_fill_gradient("Hybrid\nindex", high="red",low="blue") +
geom_rect(xmin = 11, xmax = 12.7, ymin = 50, ymax = 51.3, fill = "white") +
scale_bar(lon = 11.8, lat = 50.9, arrow_length = 10, arrow_distance = 20,
distance_lon = 20, distance_lat = 5, distance_legend = 10,
dist_unit = "km", orientation = TRUE, legend_size = 2, arrow_north_size = 3)
}
myQuantitativeParasitology <- function(x){
intensity <- round(mean(x[x>0]),1)
abundance <- round(mean(x), 1)
max <- max(x)
Ni <- length(x)
NiPos <- length(x[x>0])
# Confidence intervals for prevalence calculated with Sterne's exact method
sternetest <- epiR::epi.prev(pos = length(x[x > 0]), tested = length(x),
se = 1, sp=1, conf.level = .95, method = "sterne")
cilow <- sternetest$ap["lower"]
cihigh <- sternetest$ap["upper"]
prevalence <- sternetest$ap["est"]
# "Confidence intervals based on normal theory perform poorly
# for skewed distributions, in particular if the sample is small,
# but BCa (bias-corrected and accelerated) bootstrap confidence
# intervals proposed by Efron and Tibshirani (1993) offer a solution
# even in such cases"http://zoologia.hu/list/quant_large.pdf
set.seed(1234) # to make it replicable
bA <- one.boot(x, mean, R=1000)
myBSA <- boot.ci(bA, type=c("bca"))
confinfA <- round(myBSA$bca[4],1)
confsupA <- round(myBSA$bca[5],1)
bI <- one.boot(x[x>0], mean, R=1000)
myBSI <- boot.ci(bI, type=c("bca"))
confinfI <- round(myBSI$bca[4],1)
confsupI <- round(myBSI$bca[5],1)
## Printout results
Result <- cat(paste0("Prevalence % [CI 95%] (N infected hosts/ N hosts)\n",
round(prevalence,1), " [", round(cilow,1), "-", round(cihigh,1), "]",
" (", NiPos, "/", Ni,  ")\n",
"Abundance [CI 95%] (Max parasite load)\n",
round(abundance,1), " [", confinfA, "-", confsupA, "]",
" (", max, ")\n",
"Intensity [CI 95%] (Max parasite load)\n",
round(intensity,1), " [", confinfI, "-", confsupI, "]",
" (", max, ")"))
return(Result)
}
WATWMdata <- read.csv("../data/WATWMdata.csv")
BALdata <- read.csv("../data/BALdata.csv")
# Keep individuals with hybrid index and sex
WATWMdata <- WATWMdata[!is.na(WATWMdata$HI) & !is.na(WATWMdata$Sex),]
BALdata <- BALdata[!is.na(BALdata$HI) & !is.na(BALdata$Sex),]
# pinworms balard
pinwormsdata_bal <- BALdata[!is.na(BALdata$Aspiculuris_Syphacia),]
pinwormsdata_bal$`Aspiculuris.Syphacia+1` <-
pinwormsdata_bal$Aspiculuris_Syphacia + 1
# pinworms "where are the wormy mice"
pinwormsdata_watwm <- WATWMdata[!is.na(WATWMdata$Aspiculuris.Syphacia),]
pinwormsdata_watwm$`Aspiculuris.Syphacia+1` <-
pinwormsdata_watwm$Aspiculuris.Syphacia + 1
# Eimeria qpcr balard
qpcrdata <- BALdata[!is.na(BALdata$delta_ct_cewe_MminusE) |
!is.na(BALdata$delta_ct_ilwe_MminusE),]
df <- qpcrdata[, c("delta_ct_cewe_MminusE", "delta_ct_ilwe_MminusE")]
qpcrdata$delta_ct_max_MminusE <- apply(df, 1, function(x){max(x, na.rm = T)})
rm(df)
# threshold of detection by qPCR = -5. Then we add -5 to all to have null or positive values
qpcrdata$delta_ct_max_MminusE[qpcrdata$delta_ct_max_MminusE <= -5] <- -5
qpcrdata$delta_ct_max_MminusEPOS <- qpcrdata$delta_ct_max_MminusE + 5
# Eimeria oocysts flotation balard
flotationdata <- BALdata[!is.na(BALdata$OPG),]
flotationdata$OPG <- round(flotationdata$OPG)
flotationdata$`OPG+1` <- flotationdata$OPG + 1
# Body condition index data TBC...
"pinwormsdata_bal$Aspiculuris_Syphacia:"
myQuantitativeParasitology(pinwormsdata_bal$Aspiculuris_Syphacia)
"qpcrdata$delta_ct_max_MminusEPOS : "
myQuantitativeParasitology(qpcrdata$delta_ct_max_MminusEPOS)
"flotationdata$OPG : "
myQuantitativeParasitology(flotationdata$OPG)
"Worms:"
listWorms <- c("Hymenolepis", "Taenia", "Aspiculuris_Syphacia", "Trichuris",
"Heterakis", "Mastophorus")
apply(BALdata[,listWorms], 2, table)
x <- pinwormsdata_bal$Aspiculuris_Syphacia
## MLE of parameter k negbin
hist(x, prob=T, breaks = max(x))
# fit the negative binomial distribution
fit <- fitdist(x, "nbinom")
# get the fitted densities. mu and size from fit.
fitD <- dnbinom(0:max(x), size=fit$estimate[1], mu=fit$estimate[2])
# add fitted line (blue) to histogram
lines(fitD, lwd="3", col="blue")
# Goodness of fit with the chi squared test
# get the frequency table
t <- table(x)
# convert to dataframe
df <- as.data.frame(t)
df$x <- as.numeric(as.character(df$x))
df$expp <- pnbinom(q = df$x, size=fit$estimate[1], mu = fit$estimate[2])
df$obsp <- cumsum(df$Freq / sum(df$Freq))
# perform the chi-squared test
chisq.test(x = df$expp, y = df$obsp)
# Pearson's Chi-squared test
#
# data:  df$expp and df$obsp
# X-squared = 9120, df = 9025, p-value = 0.239
# Observed and expected frequencies do not differ significantly (P =
# 0.05) so there is no statistical evidence to reject H 0
size=fit$estimate[1]
size
# The negative binomial distribution seems to describe parasite load well for all parasites
defaultConfig <- list(optimizer = "optimx",
method = c("L-BFGS-B", "bobyqa"),
control = list(follow.on = TRUE))
model = "negbin"
data = pinwormsdata_bal
response = "Aspiculuris.Syphacia+1"
paramBounds <- getParamBounds(model, data, response)
paramBounds[["alphaStart"]] <- 1.39
paramBounds[["alphaLB"]] <- 1.38
paramBounds[["alphaUB"]] <- 1.40
fitA <- FitAdvancedAlphaNegbin(data, response, hybridIndex = "HI",
paramBounds, config = defaultConfig)
# Gtest
# LL1 <- logLik(fitF) + logLik(fitF)
# LL2 <- logLik(fit_pinworms_negbin$H3$groupA) +
#   logLik(fit_pinworms_negbin$H3$groupB)
# dLL <- LL1 - LL2
# dDF <- 2 # 2 alpha fixed in one case
# 1 - pchisq(2*0.66, df=2)
fit_WATWM_abundance <- analyse(data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
fit_WATWM_abundance
plot_WATWM_abundance <- bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
plot_WATWM_abundance
fit_WATWM_intensity <- analyse(data = pinwormsdata_watwm[pinwormsdata_watwm$Aspiculuris_Syphacia >=1,],
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
fit_WATWM_abundance <- analyse(data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
fit_WATWM_abundance <- analyse(data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
fit_WATWM_abundance
plot_WATWM_abundance <- bananaPlot(mod = fit_WATWM_abundance$H1,
data = pinwormsdata_watwm,
response = "Aspiculuris.Syphacia+1",
islog10 = TRUE, group = "Sex")
plot_WATWM_abundance
pinwormsdata_watwm[pinwormsdata_watwm$Aspiculuris_Syphacia >=1,]
fit_WATWM_intensity <- analyse(data = pinwormsdata_watwm[pinwormsdata_watwm$Aspiculuris.Syphacia >=1,],
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
source('~/Desktop/git/Parasite_Load/R/BananaPlot.R')
fit_BAL_abundance <- analyse(data = pinwormsdata_bal,
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
fit_BAL_abundance <- analyse(data = pinwormsdata_bal,
response = "Aspiculuris.Syphacia+1", model = "negbin", group = "Sex")
coef(fit_BAL_abundance$H1)
plot_BAL_
coef(fit_BAL_abundance$H1)[["alpha"]]
list.of.packages <- c("parasiteLoad",
"bbmle",
"devtools",
"optimx", # for bbmle it needs to be required(?)
"ggplot2",
"VennDiagram",
"fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"simpleboot", # BS
# "boot", # BS
"ggmap",
"gridExtra",# several plots in one panel
"wesanderson") # nice colors
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
## Install_github case
if(!"legendMap" %in% installed.packages()[,"Package"]){
devtools::install_github("3wen/legendMap")
}
library(legendMap)
WATWMdata <- read.csv("../data/WATWMdata.csv")
BALdata <- read.csv("../data/BALdata.csv")
# Keep individuals with hybrid index and sex
WATWMdata <- WATWMdata[!is.na(WATWMdata$HI) & !is.na(WATWMdata$Sex),]
BALdata <- BALdata[!is.na(BALdata$HI) & !is.na(BALdata$Sex),]
# pinworms balard
pinwormsdata_bal <- BALdata[!is.na(BALdata$Aspiculuris_Syphacia),]
pinwormsdata_bal$`Aspiculuris.Syphacia+1` <-
pinwormsdata_bal$Aspiculuris_Syphacia + 1
# pinworms "where are the wormy mice"
pinwormsdata_watwm <- WATWMdata[!is.na(WATWMdata$Aspiculuris.Syphacia),]
pinwormsdata_watwm$`Aspiculuris.Syphacia+1` <-
pinwormsdata_watwm$Aspiculuris.Syphacia + 1
# Eimeria qpcr balard
qpcrdata <- BALdata[!is.na(BALdata$delta_ct_cewe_MminusE) |
!is.na(BALdata$delta_ct_ilwe_MminusE),]
df <- qpcrdata[, c("delta_ct_cewe_MminusE", "delta_ct_ilwe_MminusE")]
qpcrdata$delta_ct_max_MminusE <- apply(df, 1, function(x){max(x, na.rm = T)})
rm(df)
# threshold of detection by qPCR = -5. Then we add -5 to all to have null or positive values
qpcrdata$delta_ct_max_MminusE[qpcrdata$delta_ct_max_MminusE <= -5] <- -5
qpcrdata$delta_ct_max_MminusEPOS <- qpcrdata$delta_ct_max_MminusE + 5
# Eimeria oocysts flotation balard
flotationdata <- BALdata[!is.na(BALdata$OPG),]
flotationdata$OPG <- round(flotationdata$OPG)
flotationdata$`OPG+1` <- flotationdata$OPG + 1
# Body condition index data TBC...
qpcr_data
qpcrdata
qpcrdata$delta_ct_max_MminusEPOS
fit_qpcr_abundance <- analyse(data = qpcrdata,
response = "delta_ct_max_MminusEPOS", model = "weibull", group = "Sex")
getParamBounds(data = qpcrdata,
response = "delta_ct_max_MminusEPOS", model = "weibull")
analyse
FitBasicNoAlphaWeibull(data = qpcrdata, "delta_ct_max_MminusEPOS", hybridIndex = HI,
paramBounds = getParamBounds(data = qpcrdata, response = "delta_ct_max_MminusEPOS", model = "weibull"),
config)
FitBasicNoAlphaWeibull(data = qpcrdata, "delta_ct_max_MminusEPOS", hybridIndex = HI,
paramBounds = getParamBounds(data = qpcrdata, response = "delta_ct_max_MminusEPOS", model = "weibull"),
config = list(optimizer = "optimx",
method = c("L-BFGS-B", "bobyqa"),
control = list(follow.on = TRUE)))
fit_qpcr_intensity <- analyse(data = qpcrdata[qpcrdata$delta_ct_max_MminusEPOS > 0,],
response = "qpcrdata$delta_ct_max_MminusEPOS", model = "negbin", group = "Sex")
fit_qpcr_intensity <- analyse(data = qpcrdata[qpcrdata$delta_ct_max_MminusEPOS > 0,],
response = "qpcrdata$delta_ct_max_MminusEPOS", model = "weibull", group = "Sex")
fit_qpcr_intensity <- analyse(data = qpcrdata[qpcrdata$delta_ct_max_MminusEPOS > 0,],
response = "delta_ct_max_MminusEPOS", model = "weibull", group = "Sex")
fit_qpcr_intensity
coef(fit_qpcr_intensity$H1)[["alpha"]]
bananaPlot(mod = fit_qpcr_intensity$H1,
data = qpcrdata[qpcrdata$delta_ct_max_MminusEPOS > 0,],
response = "Aspiculuris.Syphacia+1",
islog10 = FALSE, group = "Sex")
bananaPlot(mod = fit_qpcr_intensity$H1,
data = qpcrdata[qpcrdata$delta_ct_max_MminusEPOS > 0,],
response = "delta_ct_max_MminusEPOS",
islog10 = FALSE, group = "Sex")
fit_OPG_abundance <- analyse(data = flotationdata,
response = "flotationdata$`OPG+1`", model = "negbin", group = "Sex")
fit_OPG_abundance <- analyse(data = flotationdata,
response = "`OPG+1`", model = "negbin", group = "Sex")
fit_OPG_abundance <- analyse(data = flotationdata,
response = "OPG+1", model = "negbin", group = "Sex")
fit_OPG_abundance <- analyse(data = flotationdata,
response = "OPG+1", model = "negbin", group = "Sex")
