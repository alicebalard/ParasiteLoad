genDF2[genDF2$PIN == "Sk3173",]$PIN <- "SK_3173"
genDFTot <- merge(genDF1, genDF2, by = "PIN", all =TRUE)
## When 1 DF has a HI 14markers, takes that; when both or just HIX, takes HI.x; when none, "unknown"
genDFTot$bestHI <- NA
## by default, takes "the best" HI
genDFTot[which(!is.na(genDFTot$HI.x)),]$bestHI <- genDFTot[which(!is.na(genDFTot$HI.x)),]$HI.x
## if not there, take the HIX
genDFTot[which(is.na(genDFTot$bestHI)),]$bestHI <- genDFTot[which(is.na(genDFTot$bestHI)),]$HI.y
## Finalize:
genDFTot <- genDFTot[names(genDFTot) %in% c("PIN", "Code.x", "Code.y","bestHI")]
## Add a column "Code" to synthetize:
genDFTot$Code <- NA
genDFTot[which(is.na(genDFTot$Code.x)),]$Code <- as.character(genDFTot[which(is.na(genDFTot$Code.x)),]$Code.y)
genDFTot[which(is.na(genDFTot$Code)),]$Code <- as.character(genDFTot[which(is.na(genDFTot$Code)),]$Code.x)
## Keep useful:
genDFTot <- genDFTot[names(genDFTot) %in% c("Code","bestHI", "PIN")]
View(genDFTot)
names(genDFTot) <- c("PIN", "HI", "Code")
genDFTot$HI[is.na(genDFTot$HI)] <- "unknown"
file1 <- readDNAStringSet("/home/seafile/alice/Seafile/.seafile-data/file-cache/3f6fd93f-c37a-460f-94c4-2be56279e979/Sanger_phylo/sequences_Victor/ORF470/ORF470_2014_2015.fasta")
file2 <- readDNAStringSet("/home/seafile/alice/Seafile/.seafile-data/file-cache/3f6fd93f-c37a-460f-94c4-2be56279e979/Sanger_phylo/sequences_Victor/ORF470/ORF470_14_15_2.fasta")
file3 <- readDNAStringSet("/home/seafile/alice/Seafile/.seafile-data/file-cache/3f6fd93f-c37a-460f-94c4-2be56279e979/Sanger_phylo/sequences_Victor/ORF470/ORF470_Refseq.fasta")
##  To insert SK in the sequences names:
insertSK <- function(file){
names(file) <- paste(matrix(unlist(strsplit(names(file), "_")), ncol=2, byrow=TRUE)[,1], "SK", matrix(unlist(strsplit(names(file), "_")), ncol=2, byrow=TRUE)[,2], sep ="_")
file
}
file1 <- insertSK(file1)
file2 <- insertSK(file2)
## References used:
fileref <- c(file3[grep("separata", names(file3))],
file3[grep("falciformis", names(file3))])
names(fileref) <- paste(matrix(unlist(strsplit(names(fileref), "_")), ncol=4, byrow=TRUE)[,4], "Ref", matrix(unlist(strsplit(names(fileref), "_")), ncol=4, byrow=TRUE)[,3], sep ="_")
filesTot <- c(file1, file2, fileref)
refDF <- data.frame(matrix(NA, nrow = 2, ncol = ncol(genDFTot)))
colnames(refDF) <- colnames(genDFTot)
refDF$HI <- c("ref.separata", "ref.falciformis")
refDF$PIN <- c("separata", "falciformis")
refDF$Code <- "reference"
allDF <- rbind(genDFTot, refDF)
duplicated(allDF$PIN)
allDF[which(duplicated(allDF$PIN)),]
allDF[which(duplicated(allDF$PIN))]
allDF[which(duplicated(allDF$PIN)),]
allDF[340:343,]
unique(allDF)
allDF <- unique(allDF)
View(allDF)
file = filesTot; whichplot = "samples"; xleg = -24; yleg = 25;
scalerat = 0.4; methalign = "Muscle"; allDF = allDF;
colRefSeq = c("green", "yellow"); Nrefseq = 2; cexlegend = 0.6
library(pegas)
library(msa)
library(RColorBrewer)
myAlignment <- msa(file, method = methalign)
d <- as.DNAbin(myAlignment)
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE)
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
matchname
myAlignment <- msa(file, method = methalign)
d <- as.DNAbin(myAlignment)
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
seqnames
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE, all.x = TRUE)
View(matchname)
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
net <- haploNet(h)
rownames(ind.hap) <-  attr(net, "freq")
attr(net, "labels") <-  attr(net, "freq")
if (whichplot == "HI"){
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - Nrefseq -1), colRefSeq, "grey")
} else {
mycols <- sample(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)],
ncol(ind.hap))
}
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = scalerat,
cex = 1, bg = mycols)
legend(x = xleg, y = yleg, legend = colnames(ind.hap), fill = mycols, bty = "n", cex = cexlegend)
myBioutifulHaplo <- function(file, whichplot, xleg, yleg, scalerat, methalign, genDF, refDF, colRefSeq, Nrefseq, cexlegend){
# Setups:
library(pegas)
library(msa)
library(RColorBrewer)
## Alignement of the fasta files:
myAlignment <- msa(file, method = methalign)
## Save and visualise:
# msaPrettyPrint(myAlignment)
d <- as.DNAbin(myAlignment)
## Toolbox to switch mouse ID with either PIN or HI:
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
## Collapse the names
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE, all.x = TRUE)
## Define what we study (all seq, loc or HI):
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
## Use Pegas to get a network:
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
## Plot haplotype network:
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
## Create the network:
net <- haploNet(h)
## Set the frequencies of each haplotype as label for ind.hap and net:
rownames(ind.hap) <-  attr(net, "freq")
attr(net, "labels") <-  attr(net, "freq")
## Set colors:
if (whichplot == "HI"){
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - Nrefseq -1), colRefSeq, "grey")
} else {
mycols <- sample(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)],
ncol(ind.hap))
}
## Then plot:
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = scalerat,
cex = 1, bg = mycols)
legend(x = xleg, y = yleg, legend = colnames(ind.hap), fill = mycols, bty = "n", cex = cexlegend)
}
myBioutifulHaplo(file = filesTot, whichplot = "samples", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "samples", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "HIX", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "HIX", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDF, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
filesTot
file = filesTot; whichplot = "HI"; xleg = -24; yleg = 25;
scalerat = 0.4; methalign = "Muscle"; genDF = genDF; refDF = refDF;
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
source('~/Desktop/git_projects/EimeriaHMHZ_various_local/R_functions/myBioutifulHaplo.R')
myBioutifulHaplo <- function(file, whichplot, xleg, yleg, scalerat, methalign, genDF, refDF, colRefSeq, Nrefseq, cexlegend){
# Setups:
library(pegas)
library(msa)
library(RColorBrewer)
## Alignement of the fasta files:
myAlignment <- msa(file, method = methalign)
## Save and visualise:
# msaPrettyPrint(myAlignment)
d <- as.DNAbin(myAlignment)
## Toolbox to switch mouse ID with either PIN or HI:
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
## Collapse the names
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE, all.x = TRUE)
## Define what we study (all seq, loc or HI):
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
## Use Pegas to get a network:
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
## Plot haplotype network:
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
## Create the network:
net <- haploNet(h)
## Set the frequencies of each haplotype as label for ind.hap and net:
rownames(ind.hap) <-  attr(net, "freq")
attr(net, "labels") <-  attr(net, "freq")
## Set colors:
if (whichplot == "HI"){
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - Nrefseq -1), colRefSeq, "grey")
} else {
mycols <- sample(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)],
ncol(ind.hap))
}
## Then plot:
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = scalerat,
cex = 1, bg = mycols)
legend(x = xleg, y = yleg, legend = colnames(ind.hap), fill = mycols, bty = "n", cex = cexlegend)
}
myBioutifulHaplo <- function(file, whichplot, xleg, yleg, scalerat, methalign, genDF, refDF, colRefSeq, Nrefseq, cexlegend){
# Setups:
library(pegas)
library(msa)
library(RColorBrewer)
## Alignement of the fasta files:
myAlignment <- msa(file, method = methalign)
## Save and visualise:
# msaPrettyPrint(myAlignment)
d <- as.DNAbin(myAlignment)
## Toolbox to switch mouse ID with either PIN or HI:
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
## Collapse the names
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE, all.x = TRUE)
## Define what we study (all seq, loc or HI):
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
## Use Pegas to get a network:
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
## Plot haplotype network:
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
## Create the network:
net <- haploNet(h)
## Set the frequencies of each haplotype as label for ind.hap and net:
rownames(ind.hap) <-  attr(net, "freq")
attr(net, "labels") <-  attr(net, "freq")
## Set colors:
if (whichplot == "HI"){
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - Nrefseq -1), colRefSeq, "grey")
} else {
mycols <- sample(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)],
ncol(ind.hap))
}
## Then plot:
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = scalerat,
cex = 1, bg = mycols)
legend(x = xleg, y = yleg, legend = colnames(ind.hap), fill = mycols, bty = "n", cex = cexlegend)
}
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
genDFTot
file = filesTot; whichplot = "HI"; xleg = -24; yleg = 25;
scalerat = 0.4; methalign = "Muscle"; genDF = genDFTot; refDF = refDF;
colRefSeq = c("green", "yellow"); Nrefseq = 2; cexlegend = 0.6
library(pegas)
library(msa)
library(RColorBrewer)
myAlignment <- msa(file, method = methalign)
d <- as.DNAbin(myAlignment)
d
names(d)
attr(d)
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
seqnames
allDF
names(allDF)
allDF$PIN
myBioutifulHaplo <- function(file, whichplot, xleg, yleg, scalerat, methalign, genDF, refDF, colRefSeq, Nrefseq, cexlegend){
# Setups:
library(pegas)
library(msa)
library(RColorBrewer)
## Alignement of the fasta files:
myAlignment <- msa(file, method = methalign)
## Save and visualise:
# msaPrettyPrint(myAlignment)
d <- as.DNAbin(myAlignment)
## Toolbox to switch mouse ID with either PIN or HI:
mymice <- paste(matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,2],
matrix(unlist(strsplit(labels(d), split="_")), ncol=3, byrow=TRUE)[,3],
sep="_")
seqnames <- data.frame(PIN = mymice)
## Collapse the names
matchname <- merge(seqnames, allDF, by = intersect(names(seqnames), names(allDF)), sort = FALSE, all.x = TRUE)
## Define what we study (all seq, loc or HI):
if(whichplot == "loc"){
rownames(d) <- matchname$Code
} else if (whichplot == "HI") {
rownames(d) <- matchname$HI
} else if (whichplot == "samples") {
rownames(d) <- matchname$PIN
}
## Use Pegas to get a network:
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
## Plot haplotype network:
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
## Create the network:
net <- haploNet(h)
## Set the frequencies of each haplotype as label for ind.hap and net:
rownames(ind.hap) <-  attr(net, "freq")
attr(net, "labels") <-  attr(net, "freq")
## Set colors:
if (whichplot == "HI"){
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - Nrefseq -1), colRefSeq, "grey")
} else {
mycols <- sample(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)],
ncol(ind.hap))
}
## Then plot:
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = scalerat,
cex = 1, bg = mycols)
legend(x = xleg, y = yleg, legend = colnames(ind.hap), fill = mycols, bty = "n", cex = cexlegend)
}
fileref <- c(file3[grep("separata", names(file3))],
file3[grep("falciformis", names(file3))])
names(fileref) <- paste(matrix(unlist(strsplit(names(fileref), "_")), ncol=4, byrow=TRUE)[,4], "Ref", matrix(unlist(strsplit(names(fileref), "_")), ncol=4, byrow=TRUE)[,3], sep ="_")
filesTot <- c(file1, file2, fileref)
refDF <- data.frame(matrix(NA, nrow = 2, ncol = ncol(genDFTot)))
colnames(refDF) <- colnames(genDFTot)
refDF$HI <- c("ref.separata", "ref.falciformis")
refDF$PIN <- c("Ref_separata", "Ref_falciformis")
refDF$Code <- "reference"
allDF <- rbind(genDFTot, refDF)
allDF <- unique(allDF)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = -24, yleg = 25,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 0.6)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = "bottomleft", yleg = FALSE,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = "bottomleft", yleg = FALSE,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 10, yleg = -2,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 10, yleg = 5,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 10, yleg = 8,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 10, yleg = 10,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 15, yleg = 10,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
myBioutifulHaplo(file = filesTot, whichplot = "HI", xleg = 15, yleg = 12,
scalerat = 0.4, methalign = "Muscle", genDF = genDFTot, refDF = refDF,
colRefSeq = c("green", "yellow"), Nrefseq = 2, cexlegend = 1)
source('~/Desktop/git_projects/EimeriaHMHZ_various_local/R_functions/myBioutifulHaplo.R')
A <- read.csv("/home/alice/Downloads/timeline.csv")
View(A)
A <- read.csv2("/home/alice/Downloads/timeline.csv")
View(A)
A <- read.csv("/home/alice/Downloads/timeline.csv")
A
hist(A)
hist(A$pubmed...Eimeria)
A$pubmed...Eimeria
View(A)
View(A)
A <- read.csv("/home/alice/Downloads/timeline.csv", header = T)
View(A)
A <- read.csv("/home/alice/Downloads/timeline.csv", header = FALSE)
View(df)
View(A)
A <- read.csv("/home/alice/Downloads/timeline.csv", header = TRUE)
View(A)
A$pubmed...Eimeria
A$pubmed...Eimeria[-1]
counts <- A$pubmed...Eimeria[-1]
rownames(A)
rownames(A)[-1]
years <- rownames(A)[-1]
B <- data.frame(counts = counts,
years = years)
View(B)
hist(B)
hist(B$counts)
B <- data.frame(counts = as.numeric(counts),
years = years)
hist(B$counts)
plot(B$years, B$counts)
barplot(B$years, B$counts)
barplot( B$counts)
years
median(B$counts)
sum(B$counts)
sum(B$counts)/2
source("https://raw.githubusercontent.com/alicebalard/EimeriaHMHZ_various/master/R_functions/getGenDF.R")
getGenDF()
source("https://raw.githubusercontent.com/alicebalard/EimeriaHMHZ_various/master/R_functions/getGenDF.R")
View(genDFTot)
View(genDF1)
View(genDFTot)
source("https://raw.githubusercontent.com/alicebalard/EimeriaHMHZ_various/master/R_functions/getMapSeq.R")
getMapSeq()
myfit <- glm.hybrid::glm.hybrid(formula=loads~group1*HI*group2, data=simdata, "HI")
setwd("Schreibtisch/git_projects/parasite_load_local/Parasite_Load/tests/")
SimulatedData <- function(param, n){
gdata <- data.frame(group1 = rep(c("male", "female"), each=n/2),
group2 = sample(c("old", "young", "baby"),
n, replace=TRUE))
gdata$HI<- round(runif(n), 2)
xloads <- by(gdata, gdata$group1:gdata$group2, function (x) {
pattern <- paste0("^", unique(x$group1), ":", unique(x$group2))
this.param <- param[grepl(pattern, names(param))]
loads <- rnbinom(n = nrow(x), size = param["k"],
mu = glm.hybrid:::MeanLoad(intercept=this.param[grepl("\\.inter",
names(this.param))],
growth=this.param[grepl("\\.growth",
names(this.param))],
alpha=param["alpha"],
HI=x$HI))
cbind(x, loads)
})
as.data.frame(do.call("rbind", xloads))
}
set.seed(5)
simdata <- SimulatedData(simpara, 1000)
library(devtools)
install_github("alicebalard/Parasite_Load")
simpara <- c(k = 2, alpha = 1.92,
"male:old.inter" = 14,
"male:young.inter" = 12,
"male:baby.inter" = 10,
"female:old.inter" = 20,
"female:young.inter" = 18,
"female:baby.inter" = 11,
"male:old.growth" = 2,
"male:young.growth" = 1,
"male:baby.growth" = -4,
"female:old.growth" = 2,
"female:young.growth" = 0,
"female:baby.growth" = -1)
SimulatedData <- function(param, n){
gdata <- data.frame(group1 = rep(c("male", "female"), each=n/2),
group2 = sample(c("old", "young", "baby"),
n, replace=TRUE))
gdata$HI<- round(runif(n), 2)
xloads <- by(gdata, gdata$group1:gdata$group2, function (x) {
pattern <- paste0("^", unique(x$group1), ":", unique(x$group2))
this.param <- param[grepl(pattern, names(param))]
loads <- rnbinom(n = nrow(x), size = param["k"],
mu = glm.hybrid:::MeanLoad(intercept=this.param[grepl("\\.inter",
names(this.param))],
growth=this.param[grepl("\\.growth",
names(this.param))],
alpha=param["alpha"],
HI=x$HI))
cbind(x, loads)
})
as.data.frame(do.call("rbind", xloads))
}
set.seed(5)
simdata <- SimulatedData(simpara, 1000)
glm.hybrid:::LogLik(simdata, simpara, c("group1", "group2"))
glm.hybrid:::LogLik(simdata, simpara, c("group1", "group2"), response = 1)
logLik()
logLik
glm.hybrid::LogLik#
glm.hybrid::LogLik
glm.hybrid:LogLik
glm.hybrid:::LogLik
myfit <- glm.hybrid::glm.hybrid(formula=loads~group1*HI*group2, data=simdata, "HI")
myfit <- glm.hybrid::glm.hybrid(formula=loads~group1*HI*group2, data=simdata, "HI")
myfit$opt.param
