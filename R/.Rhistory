prev_and_mean(Joelle_data$Trichuris)
prev_and_mean(Joelle_data$Taenia)
prev_and_mean(Joelle_data$Mastophorus)
source('~/Desktop/git_projects/Parasite_Load/R/reproduce_wormy_mice_results.R')
Joelle_data <- read.csv("../../../EvolutionFinalData.csv")
library(exactci)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
library(exactci)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
?fitdistr
library(MASS)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Trichuris)
fit = MASS::fitdistr(x, densfun = "negative binomial")
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 10, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
hist(x, freq = F)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
#  hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
lines(fitD, lwd="3", col="red")
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Trichuris)
fit_neg_bin(Joelle_data$Taenia)
fit_neg_bin(Joelle_data$Mastophorus)
MeanLoad <- function(intercept, growth, alpha, HI){
(intercept + growth*HI)*(1 - alpha*2*HI*(1 - HI))
}
MeanLoad <- function(intercept, growth, alpha, HI){
(intercept + growth*HI)*(1 - alpha*2*HI*(1 - HI))
}
MeanLoad(73.95,(73.95 - 33.49), 1.39, 0.5)
59.72 - MeanLoad(73.95,(73.95 - 33.49), 1.39, 0.5)
Joelle_data <- read.csv("../../../EvolutionFinalData.csv")
Joelle_data <- read.csv("../../EvolutionFinalData.csv")
library(exactci)
library(MASS)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
devtools::check()
devtools::check()
devtools::check()
devtool::install_github("alicebalard/Parasite_Load")
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
G1 <- glm.hybrid::glm.hybrid(loads ~ HI * group1, data = simdata, alpha.along = "HI", alpha.start = 1)
simpara <- c(k = 2, alpha = 1.92,
"male:old.inter" = 14,
"male:young.inter" = 12,
"male:baby.inter" = 10,
"female:old.inter" = 20,
"female:young.inter" = 18,
"female:baby.inter" = 11,
"male:old.growth" = 2,
"male:young.growth" = 1,
"male:baby.growth" = -4,
"female:old.growth" = 2,
"female:young.growth" = 0,
"female:baby.growth" = -1)
SimulatedData <- function(param, n){
gdata <- data.frame(group1 = rep(c("male", "female"), each=n/2),
group2 = sample(c("old", "young", "baby"),
n, replace=TRUE))
gdata$HI<- round(runif(n), 2)
xloads <- by(gdata, gdata$group1:gdata$group2, function (x) {
pattern <- paste0("^", unique(x$group1), ":", unique(x$group2))
this.param <- param[grepl(pattern, names(param))]
loads <- rnbinom(n = nrow(x), size = param["k"],
mu = glm.hybrid:::MeanLoad(intercept=this.param[grepl("\\.inter",
names(this.param))],
growth=this.param[grepl("\\.growth",
names(this.param))],
alpha=param["alpha"],
HI=x$HI))
cbind(x, loads)
})
as.data.frame(do.call("rbind", xloads))
}
set.seed(5)
simdata <- SimulatedData(simpara, 1000)
G1 <- glm.hybrid::glm.hybrid(loads ~ HI * group1, data = simdata, alpha.along = "HI", alpha.start = 1)
G1
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
G1 <- glm.hybrid::glm.hybrid(loads ~ HI * group1, data = simdata, alpha.along = "HI", alpha.start = 1)
## Plot results for one group
HI = seq(0,1,0.001)
df <- data.frame(HI = HI,
ML = MeanLoad(G1$opt.param["female.inter"], G1$opt.param["female.growth"],
G1$opt.param["alpha"], HI))
library(ggplot2)
ggplot2::ggplot(df, aes(x = HI, y = ML)) +
geom_point() +
theme_classic()
devtools::check()
devtools::check()
devtools::check()
