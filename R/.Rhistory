CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
prev_and_mean(Joelle_data$Aspiculuris.Syphacia)
prev_and_mean <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
prev_and_mean(Joelle_data$Aspiculuris.Syphacia)
prev_and_mean <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
prev_and_mean(Joelle_data$Aspiculuris.Syphacia)
prev_and_mean(Joelle_data$Trichuris)
prev_and_mean(Joelle_data$Taenia)
prev_and_mean(Joelle_data$Mastophorus)
source('~/Desktop/git_projects/Parasite_Load/R/reproduce_wormy_mice_results.R')
Joelle_data <- read.csv("../../../EvolutionFinalData.csv")
library(exactci)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
library(exactci)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
?fitdistr
library(MASS)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Trichuris)
fit = MASS::fitdistr(x, densfun = "negative binomial")
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 10, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
hist(x, freq = F)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
#  hist(x, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
#  lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
lines(fitD, lwd="3", col="red")
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = T)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin <- function(x) {
x = as.vector(na.omit(x))
pos = sum(table(x)[names(table(x)) != 0])
n = sum(table(x))
mean_intensity = mean(na.omit(x))
prev = round(pos/n * 100,2)
CI_low = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[1]*100
CI_up = binom.exact(pos, n, p = pos/n,
alternative = c("two.sided", "less", "greater"),
tsmethod = c("minlike"),
conf.level = 0.95)$conf.int[2]*100
fit = MASS::fitdistr(x, densfun = "negative binomial")
# Goodness of fit with the chi squared test
df = as.data.frame(table(x))
names(df) = c("values", "observed_freq")
df$values = as.numeric(as.character(df$values))
df$expected_freq = dnbinom(df$values, size = fit$estimate[1],
mu = fit$estimate[2]) * sum(df$observed_freq)
Chi2 = chisq.test(x = df$observed_freq, y = df$expected_freq)
# Plot the histogram & fitted distribution
hist(x, breaks = 50, freq = F)
fitD = dnbinom(0:length(x), size = fit$estimate[1], mu = fit$estimate[2])
lines(fitD, lwd="3", col="red")
return(list(pos = pos, n = n, mean_intensity = mean_intensity,
prev = prev, CI_low = CI_low, CI_up = CI_up, fit.neg.bin = fit,
Chi2 = Chi2))
}
fit_neg_bin(Joelle_data$Aspiculuris.Syphacia)
fit_neg_bin(Joelle_data$Trichuris)
fit_neg_bin(Joelle_data$Taenia)
fit_neg_bin(Joelle_data$Mastophorus)
